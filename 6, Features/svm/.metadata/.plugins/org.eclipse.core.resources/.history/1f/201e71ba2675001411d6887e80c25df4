import libsvm.*; 

public class main {

	public static void main(String[] args) {
		
		double [][] train_data = FileReading.ReadFile("spambase.data");
		double [][] normal_train_data = Util.getNormalizedData(train_data); 
		
		System.out.println(train_data[0][0]);
		System.out.println(normal_train_data[0][0]);
		
    
		svm_model model = train_func(normal_train_data);
		

	    
	    		
	}
		 
	public static int evaluate_func(svm_model model , double[] features) {
	    svm_node node = new svm_node();
	    for (int i = 0; i < features.length-1; i++){
	        node.index = i;
	        node.value = features[i];
	    }
	    svm_node[] nodes = new svm_node[1];
	    nodes[0] = node;

	    int totalClasses = 2;       
	    int[] labels = new int[totalClasses];
	    svm.svm_get_labels(model,labels);

	    double[] prob_estimates = new double[totalClasses];
	    double v = svm.svm_predict_probability(model, nodes, prob_estimates);

	    for (int i = 0; i < totalClasses; i++){
	        System.out.print("(" + labels[i] + ":" + prob_estimates[i] + ")");
	    }
	    System.out.println("(Actual:" + features[0] + " Prediction:" + v + ")");            

	    return (int)v;
	}
	public static svm_model train_func(double[][] data){
		
		svm_problem prob = new svm_problem();
		int dataCount = data.length;
		
		prob.y = new double[dataCount];
	    prob.l = dataCount;
	    prob.x = new svm_node[dataCount][];     

	    for (int i = 0; i < dataCount; i++){   
	    	
	        double[] features = data[i];
	        prob.x[i] = new svm_node[features.length-1];
	        for (int j = 0; j < features.length -1 ; j++){
	            svm_node node = new svm_node();
	            node.index = j;
	            node.value = features[j];
	            prob.x[i][j] = node;
	        }           
	        prob.y[i] = features[features.length-1];
	    } 
	    
	    svm_parameter param = new svm_parameter();
	    param.probability = 1;
	    param.gamma = 0.5;
	    param.nu = 0.5;
	    param.C = 1;
	    param.svm_type = svm_parameter.C_SVC;
	    param.kernel_type = svm_parameter.POLY;       
	    param.cache_size = 20000;
	    param.eps = 0.001;  
	    
	    svm_model model = svm.svm_train(prob, param);
	    
	    return model; 
	}
}

