
public class Platt_SVM {

	SVM_Param svm_p ; 
	int num_train_example;
	double[] alphas;  
	
	double[][] train_data; 
	double [] train_y; 
	
	double tolerance = 0.001;
	double b = 0;
	
	double[] w; 
	
	 
	
	public Platt_SVM(SVM_Param p , double [][] data_x, double[] data_y){
		
		svm_p = p; 
		train_data = data_x;
		train_y = data_y;
		
		num_train_example = data_y.length; 
		
		w = new double[num_train_example];
		Util.initial_array(w, 0);
	}
	
	public void main_routine(){ 
		
		alphas = new double[num_train_example];
		Util.initial_array(alphas, 0);
		
		int num_changed = 0 ; 
		boolean examineAll = true; 
		
		while( num_changed > 0 || examineAll ){
			num_changed = 0 ; 
			if ( examineAll ){
				for (int i = 0 ; i < num_train_example ; i++){
					num_changed += examine_example(i);
				}
			}else {
				for (int i = 0 ; i < num_train_example ; i++){
					if ( alphas[i] > 0 && alphas[i] < svm_p.C ){
						num_changed += examine_example(i);
					}
				}
			}
			
			if ( examineAll ){
				examineAll = false; 
			}else{
				if (num_changed == 0){
					examineAll = true; 
				}
				
			}
		}
		
	}
	
	
	public int examine_example (int data_index){
		int index2 = data_index; 
		double y = train_y[data_index];
		double alpha = alphas[data_index];
		
		double pred_val = svm_output(data_index);//// to be checked 
		double e = pred_val - y; 
		
		double r = e * y;
		
		if ( (r < - tolerance && alpha < svm_p.C) || ( r > tolerance && alpha > 0) ){
			
			if ( Util.get_num_between_value(alphas, 0, svm_p.C) > 1){
				int index1 = second_heuristic(); 
				if ( take_step(index1, index2) )
					return 1; 
			}
			
			 
			int len = num_train_example;
			int rand_index = Util.get_random_number(len);
			for (int i = rand_index ; i < rand_index + len ; i++){
				
				int index1 = i % len ;
				if (alphas[index1] > 0 && alphas[index1] < svm_p.C){
					if(take_step(index1, index2)){
						return 1;
					}
				}
			}
			
			len = num_train_example;
			rand_index = Util.get_random_number(len);
			for (int i = rand_index ; i < rand_index + len ; i++){
				int index1 = i % len; 
				if( take_step(index1, index2)){
					return 1; 
				}
			}
			
		}
		
		return 0 ; 
	}
	
	public int second_heuristic(){
		return 0; 
	}
	
	public boolean take_step(int index1 , int index2){
		
		
		if (index1 == index2)
			return false; 
		
		double alpha1 = alphas[index1];
		double alpha2 = alphas[index2];
		double y1 = train_y[index1];
		double y2 = train_y[index2];
		
		double a1; 
		double a2; 
		
		double e1 = svm_output(index1) - y1;
		double e2 = svm_output(index2) - y2; 
		double s = y1 * y2;
		
		double H = compute_H(y1, y2, alpha1, alpha2);
		double L = compute_L(y1, y2, alpha1, alpha2);
		
		if ( H == L )
			return false;
		
		double k11 = kernel(index1, index1);
		double k12 = kernel(index1, index2); 
		double k22 = kernel(index2, index2);
		
		double eta = k11 + k22 - 2 * k12;
		 
		if (eta > 0){
			
			a2 = alpha2 + y2 * (e1 - e2)/eta;
			
			if ( a2 < L ){
				a2 = L; 
			}else{
				if ( a2 > H){
					a2 = H; 
				}
			}
		}else{
			System.out.println("negetive eta");
			double L_obj = get_obj_function(L, index1, index2, alpha1, alpha2, e1, e2, s);
			double H_obj = get_obj_function(H, index1, index2, alpha1, alpha2, e1, e2, s);
						
			if (L_obj < H_obj - svm_p.epsilon )
				a2 = L;
			else{
				if (L_obj > H_obj - svm_p.epsilon){
					a2 = H; 
				}else{
					a2 = alpha2; 
				}
			}
				
		}
		
		if ( Math.abs(a2 - alpha2) < svm_p.epsilon * (a2 + alpha2 + svm_p.epsilon) )
			return false; 
		
		a1 = alpha1 + s * (alpha2 - a2);
		
		update_threshold(index1, index2, e1, e2 , a1, a2, a1, a2);
		if (svm_p.kernel_type == SVM_Param.LINEAR)
			update_weight(index1, index2, a1, a2);
		
		//update_error_cache();
		
		alphas[index1] = a1; 
		alphas[index2] = a2; 
		
		return true; 
	}
	
	public double svm_output(int data_index){
		return 0 ; 
	}
	
	
	public double kernel (int index1, int index2){
		return 0 ;
	}
	
	public void update_threshold(int index1, int index2 , double E1, double E2, 
						double new_alpha1, double new_alpha2, double clip_alpha1, double clip_alpha2){
		double y1 = train_y[index1];
		double y2 = train_y[index2];
		
		double alpha1 = alphas[index1]; 
		double alpha2 = alphas[index2];
		
		double b1 = E1 + y1 * (new_alpha1 - alpha1) * kernel(index1, index1) + y2 * (clip_alpha2 - alpha2) * kernel(index1, index2) + b; 
		double b2 = E2 + y1 * (new_alpha1 - alpha1) * kernel(index1, index2) + y2 * (clip_alpha2 - alpha2) * kernel(index2, index2) + b;
		
		b = (b1 + b2)/2; 
	}
	
	public double compute_H(double y1, double y2, double alpha1, double alpha2){
		double H; 
		if (y1 == y2){
			H = Math.min(svm_p.C, alpha1 + alpha2);
		}else{
			H = Math.min(svm_p.C, svm_p.C + alpha2 - alpha1);
		}
		return H; 
		
	}
	
	public double compute_L(double y1, double y2, double alpha1, double alpha2){
		double L; 
		if (y1 == y2){
			L = Math.max(0, alpha1 + alpha2 - svm_p.C); 
		}else{
			L = Math.max(0, alpha2 - alpha1);
		}
		return L; 

	}
	

	
	public double get_obj_function(double input , int index1, int index2, double alpha1, double alpha2, 
											double E1, double E2, double s){
		double y1 = train_y[index1];
		double y2 = train_y[index2];	
				
		double f1 = y1 * (E1+b) - alpha1 * kernel(index1, index1) - s * alpha2 * kernel(index1, index2);
		double f2 = y2 * (E2+b) - s * alpha1 * kernel(index1, index2) - alpha2 * kernel(index2, index2);
		
		double input1 = alpha1 + s * (alpha2 - input);
		
		
		double obj_val = input1*f1 + input * f2; 
		obj_val = obj_val + 1/2 * input1 * input1 * kernel(index1, index2); 
		obj_val = obj_val + 1/2 * input * input * kernel(index1, index2);
		return obj_val; 
	}
	
	public void  update_weight(int index1, int index2 , double a1, double a2){
		int len = num_train_example; 
		
		double[] w_new = new double [len];
		double y1 = train_y[index1];
		double y2 = train_y[index2];
		
		double alpha1 = alphas[index1]; 
		double alpha2 = alphas[index2];
		
		double[] x1 = train_data[index1];
		double[] x2 = train_data[index2];
		
		for (int i = 0 ; i < len; i++){
			w_new[i] = w[i] + y1 * (a1 - alpha1) * x1[i] + y2 * (a2 -alpha2) * x2[i]; 
		}
		
		for (int i = 0; i < len ; i++){
			w[i] = w_new[i];
			
		}
	}
}
