
public class Util {

	public static double [][] getNormalizedData(double[][] data, boolean use_vector,  double[] minn, double[] maxx){
		int n = data.length; 
		int m = data[0].length; 
		
		double [][] normal_data = new double [n][m]; 
		
		if (use_vector){
			for (int j = 0 ; j < m;  j++){
				for (int i = 0 ; i < n ; i++){
					
					normal_data[i][j] = (data[i][j] - minn[j])/maxx[j];
//					if ( i == 0 && j == 1){
//						System.out.println("hey " + minn[j]);
//					}
				}
				
			}
			
		}else{
		
			for (int j = 0 ; j < m ; j++){
				
				double [] temp = getTableColumn_j(data, j);
				double max_val = getMaxVal(temp); 
				double min_val = getMinVal(temp);
				
				minn[j] = min_val; 
				maxx[j] = max_val; 
				
				for (int i = 0 ; i < n ; i++){
					
						normal_data[i][j] = (data[i][j] - min_val) / max_val;
						
					
				}
			}
		}
		return normal_data; 
		
	}
	
	public static double[] getTableColumn_j(double[][] table, int j ){
		int row_num = table.length; 
		int col_num = table[0].length; 
		
		if ( j>= col_num){
			System.err.println("function Util.getTableColumn_j: j exceeds table cols");
			return null; 
		}
		
		double[] col_arr = new double[row_num];
		for(int i = 0 ; i < row_num; i++){
			col_arr[i] = table[i][j];
		}
		
		return col_arr; 
	}
	
	public static double[] getTableRow_i(double[][]table, int i){
		int row_num = table.length; 
		int col_num = table[0].length;
		
		if (i>= row_num ){
			System.err.println("function Util.getTableRow_i: i exceeds table rows");
			return null; 
		}
		
		double[] row_arr = new double[col_num]; 
		for (int k = 0 ; k < col_num; k++){
			row_arr[k] = table[i][k];
		}
		return row_arr; 
	}
	public static double getMinVal(double[] data) {
		int len = data.length; 
		
		double min_val = data[0]; 
		
		for (int i = 0 ; i < len ; i++){
			if (data[i] < min_val)
				min_val = data[i];
		}
		
		return min_val;
	}


	public static double getMaxVal(double[] data) {
		int len = data.length; 
		
		double max_val = 0 ; 
		for (int i = 0 ; i < len ; i++){
			if (data[i] > max_val )
				max_val = data[i];
		}
		return max_val;
	}
	
	public static void initial_array(double [] arr, double init_val){
		int n = arr.length; 
		
		for (int i = 0 ; i < n ; i++){
			arr[i] = init_val; 
		}
	}
}
